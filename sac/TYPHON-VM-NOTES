* Overview

Some quick notes related to how Typhon's VM works, and how it could be possibly imporoved; from my hand written notes.

* Typhon's current model:

`(define (fib n)
	(if (<= n 0)
		0	
        (if (= n 1)
            1
		    (+ (fib (- n 1)) (fib (- n 2))))))`

becomes:

`((31 n)
  (3 0)
  (11)
  (29 3)
  (3 0)
  (28 18)
  (31 n)
  (3 1)
  (26)
  (29 3)
  (3 1)
  (28 12)
  (31 n)
  (3 1)
  (5)
  (31 fib)
  (110 not-found)
  (31 n)
  (3 2)
  (5)
  (31 fib)
  (110 not-found)
  (6))`

(that's without the surrounding `compiled-lambda`)

A simple test case shows what's next:

`(define (x) (fib 10))`

A simple breakdown by `,i x` shows us what `x` becomes: `((3 10) (31 fib) (110 found))`. 

* What I think needs to be done:

- `n` is already on the stack, why take it off and into the env?
- only `define` should add to the env; params should live only on the stack (until they escape... :|)
- do both? add to the env & rely on the stack for code. need to track which items are params to be able to emit properly.
- implement a RECURSE instruction; used only for self-recursion (i.e. different from TAIL-CALL)
- add the procedure to the environment, so that RECURSE can be emitted (e.g. detected by `typhon@compile`)
- add DUP, ROT, PICK, SWAP, OVER, TUCK, NIP to the instruction set to help with stack-based coding.
- ... which become really messy in the fib + fib code; have to NPICK for the second call to `fib`, which is yuck
- have a local stack for params? ala python's "fast load"
- compiler tracks & emits the fast load & what is stored where
- down side? need to update _two_ locations for set!
- Python uses "STORE_FAST", which is pretty reasonable, and I think it should work. Would need a "locals" stack added to `hydra@vm` though...

* Investigate this error:

`;t (load 'prelude.ss)
;t (with begin (lambda (x y) (display x) (newline) (display y) (newline)) (begin 1 2))
2
;t _
2
;t (with foo (lambda (x y) (display x) (newline) (display y) (newline)) (foo 1 2))
#<Error>
`

What's that error that's occuring in there? Is that a Vesta-level error? Should make the RTS display "#<Error message>"...

 *AH HA!*
So the error is "Unknown procedure: \"fo\""; it seems like binding things like `begin` or `foo` (which is the procedure "fo") don't work in
"with" or `lambda`, but do work with `define`; `(define (foo x) (+ x x))` does what you'd expect.

`;t (load 'prelude.ss)     
;t (with begin (fn (x y) (+ x y)) (begin 1 2))
2
;t (with begin (fn (x y) (+ x y)) (begin 1 2))
2
;t (with foo (fn (x y) (+ x y)) (foo 1 2))
#<Error "unknown procedure "fo"">
;t (with bar (fn (x y) (+ x y)) (bar 1 2))
3
;t (with foo (fn (x y) (+ x y)) (foo 1 2))
#<Error "unknown procedure "fo"">
;t (define foo 10)
;t (with foo (fn (x y) (+ x y)) (foo 1 2))
3
;t (with begin (fn (x y) (+ x y)) (begin 1 2))
2
;t (define (baz) (with begin (fn (x y) (+ x y)) (begin 1 2)))
;t ,i baz
(compiled-lambda [ (#<Dictionary>) ((3 (compiled-lambda [ (#<Dictionary>) ((112 0) (112 1) (6)) (x y) ])) (109) (3 (compiled-lambda [ (#<Dictionary>) ((3 1) (3 2)) (begin) ])) (109) (110)) () ])
    ;t (with display (fn (x y) (+ x y)) (display 1 2))
#<Error "display's p argument must be of type PORT">`

I think I got it: when `compile-lambda` is called, it's not taking into account the environment that's being defined within the `with`, so it's using the
default notion of `begin`, `display`, `foo`, &c.
