;; tiny program to convert literal version of hydra's environment
;; into a simpler version that uses cset!'s 
(define *tlenv* '({
    :car (primitive . 0) ;; (primitive . 0) 
    :cdr (primitive . 1)
    :cons (primitive . 2)
    :%load (primitive . 3) ;; 3 is load a value onto the stack
    :%nil (primitive . 4) ;; 4 is push a nil onto the stack
    :%- (primitive . 5) ;; primitive math operations with arity 2
    :%+ (primitive . 6)
    :%* (primitive . 7)
    :%/ (primitive . 8)
    :%< (primitive . 9)
    :%> (primitive . 10)
    :%<= (primitive . 11)
    :%>= (primitive . 12)
    :if (syntax . primitive-syntax-if)
    :fn (syntax . primitive-syntax-fn)
    :lambda (syntax . primitive-syntax-fn)
    :quote (syntax . primitive-syntax-quote)
    :quasi-quote (syntax . primitive-syntax-qquote)
    :unquote (syntax . primitve-syntax-unquote)
    :unquote-splice (syntax . primitive-syntax-unqsplice)
    :length (primitive . 13)
    :exact? (primitive . 14)
    :inexact? (primitive . 15)
    :display (primitive . 16)
    :apply (primitive . 17)
    :real? (primitive . 18)
    :integer? (primitive . 19)
    :complex? (primitive . 20)
    :rational? (primitive . 21)
    :gcd (primitive . 22)
    :lcm (primitive . 23)
    :numerator (primitive . 24)
    :denomenator (primitive . 25)
    :%= (primitive . 26) ;; probably has to place the value on stack rather than #t, #f for failure
    :eq? (primitive . 27)
    :%jmp (primitive . 28) ;; 28 is jump
    :%cmp (primitive . 29) ;; 29 is compare
    :%call (primitive . 30) ;; 30 is call
    :%env-load (primitive . 31) ;; 31 is environment-load
    :%tail-call (primitive . 32) ;; 32 is tail-call; is this necessary? operand to CALL?
    :+ (syntax . primitive-syntax-plus) ;; variable arity syntax
    :- (syntax . primitive-syntax-minus)
    :* (syntax . primitive-syntax-mult)
    :/ (syntax . primitive-syntax-div)
    :< (syntax . primitive-syntax-lt)
    :> (syntax . primitive-syntax-gt)
    :<= (syntax . primitive-syntax-lte)
    :>= (syntax . primitive-syntax-gte)
    := (syntax . primitive-syntax-numeq)
    :define (syntax . primitive-syntax-define)
    :set! (syntax . primitive-syntax-set)
    :define-syntax (syntax . primitive-syntax-defsyn)
    :define-macro (syntax . primitive-syntax-defmac)
    :%define (primitive . 33)
    :%set! (primitive . 34)
    :ceil (primitive . 35)
    :floor (primitive . 36)
    :truncate (primitive . 37)
    :round (primitive . 38)
    :inexact->exact (primitive . 39)
    :quotient (primitive . 40)
    :modulo (primitive . 41)
    :& (primitive . 42)
    :| (primitive . 43)
    :^ (primitive . 44)
    :~ (primitive . 45)
    :%list (primitive . 46)
    :list (syntax . primitive-syntax-list)
    :%vector (primitive . 47)
    :vector (syntax . primitive-syntax-vector)
    :%make-vector (primitive . 48)
    :make-vector (syntax  . primitive-syntax-makevector)
    :%make-string (primitive . 49)
    :make-string (syntax . primitive-syntax-makestring)
    :%string (primitive . 50)
    :string (syntax . primitive-syntax-string)
    :%append (primitive . 51)
    :append (syntax . primitive-syntax-append)
    :first (primitive . 52)
    :rest (primitive . 53)
    :ccons (primitive . 54)
    :nth (primitive . 55)
    :keys (primitive . 56)
    :partial-key? (primitive . 57)
    :cset! (primitive . 58)
    :empty? (primitive . 59)
    :define-macro (syntax . primitive-syntax-defmac)
    :gensym (primitive . 60)
    :imag-part (primitive . 61)
    :real-part (primitive . 62)
    :make-rectangular (primitive . 63)
    :make-polar (primitive . 64)
    :magnitude (primitive . 65)
    :argument (primitive . 66)
    :conjugate (primitive . 67)
    :conjugate! (primitive . 68)
    :polar->rectangular (primitive . 69)
    :rectangular->polar (primitive . 70)
    :sin (primitive . 71)
    :cos (primitive . 72)
    :tan (primitive . 73)
    :asin (primitive . 74)
    :acos (primitive . 75)
    :atan (primitive . 76)
    :atan2 (primitive . 77)
    :sinh (primitive . 78)
    :cosh (primitive . 79)
    :tanh (primitive . 80)
    :exp (primitive . 81)
    :ln (primitive . 82)
    :abs (primitive . 83)
    :sqrt (primitive . 84)
    :exp2 (primitive . 85)
    :expm1 (primitive . 86)
    :log2 (primitive . 87)
    :log10 (primitive . 88)
    :<< (primitive . 89)
    :>> (primitive . 90)
    :string-append (primitive . 91)
    :assq (primitive . 92)
    :memq (primitive . 93)
    :dict (primitive . 94)
    :make-dict (primitive . 95)
    :dict-has? (primitive . 96)
    :coerce (primitive . 97)
    :cupdate (primitive . 98)
    :cslice (primitive . 99)
    :tconc! (primitive . 100)
    :make-tconc (primitive . 101)
    :tconc-list (primitive . 102)
    :tconc->pair (primitive . 103)
    :tconc-splice (primitive . 104)
    :rationalize (primitive . 105)
    :call/cc (primitive . 106)
    :%nop (primitive . 107) ;;no operation 
    :%ap  (primitive . 108) ;; apply a continuation
}))
(def foreach foreach-proc)
(def e (car *tlenv*))
(foreach (fn (x) (display "    (cset! env \"") (display x) (display "\" '") (display (nth e x)) (display ")\n")) (keys e))
