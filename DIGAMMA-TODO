#+TITLE: Digamma Todo lists
#+DATE: 15-DEC-2012
#+AUTHOR: Stefan Edwards <sae@lojikil.com>

* Vesta\/Hydra
- engines
- current\-input\-port, current\-output\-port, current\-error\-port
- with\-output, with\-input, with\-error
- get\/set current\-X\-port

* Enyalios
- DONE: top level Symbol for procedures, added to lparams["env"]
- DONE: top level static snil, strue, &c.
- DONE: add static snil &c to top level Symbol
- DONE: add that top level Symbol to procedure calls
- closures in HOFs
- free analysis for closures
- Internally\-defined procedure lifting
- Inlining
- typing ala Stalin \(recursive union types, soft\-typing\/gradul\-typing)
- named\-let
- do\-loops \(I guess?)
- fix apply!
- letrec
- DONE: let* fix \(doesn't correctly pass rewritten vars from above)
- fix load
- define\-c\-syntax
- IL\->JS, IL\->C++, IL\->JAVA
- support %c, define\-alien for self\-hosting runtimes.
- DONE: %include, %prim
- inline of lift
- if lift, do free analysis & closure conversion
- if an inner proc is used in _tail position_, inline it (maybe only if tail rec?)
- beter param shaddowing; no reliance on another var? no shaddowing
- optimize more primitives: + - / * < > >= <=
- open code fnumeq similar to eq?
- possibly look into destructive parameter updates? (foo (+ i 1)) could be AINT(i) += 1

* Hydra\-only
- DONE: review user of map, and potentially replace with bespoke, Enyalios\-friendly equivalent (SAC)
- Core version without repl\/read, for use with IL\->JS
- Move stack from pair to vector with fixed size, stack pointer, &c. (testing)
- hydra@{operand, instruction} => simple syntax

* All
- SRFI\-0\/7, for supporting different loads, different FFIs, different low-level runtimes...
- Scheme48\-style modules.
- define\-syntax
